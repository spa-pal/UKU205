								  
if ( PortNum == 0 )
     {
     ///LPC_PINCON->PINSEL0 &= ~0x000000F0;
	///LPC_PINCON->PINSEL0 |= 0x00000050;  /* RxD0 is P0.3 and TxD0 is P0.2 */
	/* By default, the PCLKSELx value is zero, thus, the PCLK for
	all the peripherals is 1/4 of the SystemFrequency. */
	/* Bit 6~7 is for UART0 */
	///pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
	/*switch ( pclkdiv )
	     {
	     case 0x00:
	     default:
		pclk = SystemFrequency/4;
		break;
	     case 0x01:
		pclk = SystemFrequency;
		break; 
	     case 0x02:
		pclk = SystemFrequency/2;
		break; 
	     case 0x03:
		pclk = SystemFrequency/8;
		break;
	     }*/

     ///LPC_UART0->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
	///Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
     ///LPC_UART0->DLM = Fdiv / 256;							
     ///LPC_UART0->DLL = Fdiv % 256;
	///LPC_UART0->LCR = 0x03;		/* DLAB = 0 */
     ///LPC_UART0->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */

   	///NVIC_EnableIRQ(UART0_IRQn);

     ///LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
     return (TRUE);
     }
else if ( PortNum == 1 )
     {
	LPC_PINCON->PINSEL4 &= ~0x0000000F;
	LPC_PINCON->PINSEL4 |= 0x0000000A;	/* Enable RxD1 P2.1, TxD1 P2.0 */
	
	/* By default, the PCLKSELx value is zero, thus, the PCLK for
	all the peripherals is 1/4 of the SystemFrequency. */
	/* Bit 8,9 are for UART1 */
	pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
	switch ( pclkdiv )
	     {
	     case 0x00:
	     default:
	     pclk = SystemFrequency/4;
	     break;

	     case 0x01:
	     pclk = SystemFrequency;
	     break;
      
	     case 0x02:
	     pclk = SystemFrequency/2;
	     break;
      
	     case 0x03:
	     pclk = SystemFrequency/8;
	     break;
	     }

LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
LPC_UART1->DLM = Fdiv / 256;							
LPC_UART1->DLL = Fdiv % 256;
LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */

NVIC_EnableIRQ(UART1_IRQn);

LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
return (TRUE);
  }
  return( FALSE ); 
}

/*****************************************************************************
** Function name:		UARTSend
**
** Descriptions:		Send a block of data to the UART 0 port based
**						on the data length
**
** parameters:			portNum, buffer pointer, and data length
** Returned value:		None
** 
*****************************************************************************/
void UARTSend( uint32_t portNum, uint8_t *BufferPtr, uint32_t Length )
{
  if ( portNum == 0 )
  {
    while ( Length != 0 )
    {
	  /* THRE status, contain valid data */
	  while ( !(UART0TxEmpty & 0x01) );	
	  LPC_UART0->THR = *BufferPtr;
	  UART0TxEmpty = 0;	/* not empty in the THR until it shifts out */
	  BufferPtr++;
	  Length--;
	}
  }
  else
  {
	while ( Length != 0 )
    {
	  /* THRE status, contain valid data */
	  while ( !(UART1TxEmpty & 0x01) );	
	  LPC_UART1->THR = *BufferPtr;
	  UART1TxEmpty = 0;	/* not empty in the THR until it shifts out */
	  BufferPtr++;
	  Length--;
    }
  }
  return;